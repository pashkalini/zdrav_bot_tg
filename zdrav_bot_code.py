# import xml.etree.ElementTree as ET
import datetime

import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode
from aiogram.utils.callback_data import CallbackData

import config
import logging
from aiogram import Bot, Dispatcher, executor, types
import mis_arianda
import db_postgre as db

API_TOKEN = config.TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()  # TODO —Å—é–¥–∞ –ë–î
dp = Dispatcher(bot, storage=storage)

msg_ids_from_auth = []


# START - –ù–ê–ß–ê–õ–û –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° –ë–û–¢–û–ú
@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!"
                         "".format(message.from_user),
                         parse_mode='html')

    with open("start_info_message.txt", 'r', encoding='utf8') as intro_f:
        await message.answer(intro_f.read())

    await lk_question(message)


# –≤–æ–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –õ–ö
async def lk_question(message: types.Message):
    lk_markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–î–ê", callback_data='lk_exists')
    item2 = types.InlineKeyboardButton("–ù–ï–¢", callback_data='lk_not_exists')
    lk_markup.add(item1, item2)

    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?", reply_markup=lk_markup)
    # one_step_back()


''' –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –û–¢–†–ê–ë–û–¢–ö–ê –õ–û–ì–ò–ö–ò –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö '''
''' 1 - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –õ–ö: 1 —à–∞–≥ - —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ 2 –∫–Ω–æ–ø–∫–∏ '''


@dp.callback_query_handler(text="lk_not_exists")
async def registration_offer(call: types.CallbackQuery):
    await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # await call.message.delete_reply_markup()  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    registration_question = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='to_registration')
    item2 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data='continue_without_reg')
    registration_question.add(item1, item2)

    await call.message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å, "
                              "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø–∏—Å–∏ –∏ –æ–ø–ª–∞—Ç—ã. "
                              "–ê –µ—â—ë –Ω–∞—à –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏ –¥–æ "
                              "–ø—Ä–∏–µ–º–∞ –∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é "
                              "—Ü–µ–Ω—Ç—Ä–∞.", reply_markup=registration_question)
    # one_step_back()

    # bot.delete_message(msg.chat_id, msg.message_id)
    # bot.register_next_step_handler(msg, getg )


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø - –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –ù–ê –§–û–†–ú–£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò'''


@dp.callback_query_handler(text="to_registration")
async def registration_link(call: types.CallbackQuery):
    # await call.message.delete_reply_markup()  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    await call.message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –Ω–∞ —Å–∞–π—Ç –°–ó–û–ù–ö–¶ –°–æ–∫–æ–ª–æ–≤–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ"
                              " —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                              "üåê https://med122.com/telemedicine/register/\n\n"
                              "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è"
                              " –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                              "–û–Ω–∏ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—à–ª—é—Ç –Ω–∞ –ø–æ—á—Ç—É –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.\n\n"
                              "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.")
    await lk_question(call.message)


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø - –û–¢–ü–†–ê–í–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¶–ï–ù–¢–†–ï'''


@dp.callback_query_handler(text="continue_without_reg")
async def registration_link(call: types.CallbackQuery):
    # await call.message.delete_reply_markup()  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    record_btn = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data='record_to_doc')
    record_btn.add(item1)
    with open("about_clinic.txt", 'r', encoding='utf8') as about_f:
        await call.message.answer(about_f.read(), reply_markup=record_btn)


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –ö –í–†–ê–ß–£ (–ù–ï–ó–ê–†–ï–ì. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨) - –¢–ï–ö–°–¢ –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ó–ê–†–ï–ì–ê–¢–¨–°–Ø'''


@dp.callback_query_handler(text="record_to_doc")
async def registration_link(call: types.CallbackQuery):
    await call.message.delete_reply_markup()  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    await call.message.answer("–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ "
                              "—Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    await registration_offer(call)


''' 2 - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –õ–ö: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è)'''


#  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async def repeat_auth(message: types.Message, method):
    if method == "error":
        # await message.delete()
        markup = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üîê", callback_data='lk_exists')
        item2 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", callback_data='lk_not_exists')
        markup.add(item, item2)

        await message.edit_text(text="–í–∞—Å –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ "
                                     "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.", reply_markup=markup)
        return "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    else:
        return


# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (States) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
class RegForm(StatesGroup):
    login = State()  # –ó–∞–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    passwd = State()


#  –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ–Ω–ø–∫—É —Å callback_data = lk_exists
@dp.callback_query_handler(text="lk_exists")
async def authorisation_start(call: types.CallbackQuery):
    # await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    await RegForm.login.set()  # –∑–∞–¥–∞–µ–º state (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    message_id = await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: \n(—Ç–æ—Ç –∂–µ, —á—Ç–æ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è "
                                              "–¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ lk.med122.com)")
    msg_ids_from_auth.append(message_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, —Å–º. —Ñ-—Ü–∏—é auth_welcome


#  –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 1 –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω
@dp.message_handler(state=RegForm.login)
async def process_name(message: types.Message, state: FSMContext):
    await message.delete()  # # —á—É–¥–æ-—É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
    #  –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç state —Ç–∏–ø–∞ FSMContext. –ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç FSM-–±—ç–∫–µ–Ω–¥–∞.
    async with state.proxy() as data:
        data['login'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–æ–≥–∏–Ω
        await RegForm.next()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - —É –Ω–∞—Å —ç—Ç–æ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è

        message_id = await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        msg_ids_from_auth.append(message_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, —Å–º. —Ñ-—Ü–∏—é auth_welcome
        await state.update_data(passwd=message.text)  # –æ–±–Ω–æ–≤–ª—è–µ–º data –∏ state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è


# –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 2 –±–µ—Ä–µ–º –ø–∞—Ä–æ–ª—å
@dp.message_handler(state=RegForm.passwd)
async def process_passwd(message: types.Message, state: FSMContext):
    await message.delete()  # —á—É–¥–æ-—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    async with state.proxy() as data:
        data['passwd'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        await state.finish()

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ç —Å—Ç–æ–∏—Ç —á—Ç–æ-—Ç–æ –≤—ã–Ω–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ú–ò–° –ê—Ä–∏–∞–¥–Ω–∞ -- –≤—ã–Ω–µ—Å–µ–Ω–æ

        login_response = mis_arianda.auth(data['login'], data['passwd'])

        if login_response.json().get("success"):
            # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
            token = login_response.json().get("data").get("token")
            db.save_token(message.chat.id, token)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î –≤–º–µ—Å—Ç–µ —Å chat_id

            print("Authorization: SUCCESS!")
            # print(db.use_token(message.chat.id))

            welcome_menu = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton("–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚û°", callback_data='lk_menu')
            welcome_menu.add(item1)
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n", reply_markup=welcome_menu)
            # "‚ö† –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –í–∞–º —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å "
            # "–ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
            # get_info = mis_arianda.get_patient_info(db.use_token(message.chat.id))
            # patient_lastname = get_info.get("lastname")
            # patient_firstname = get_info.get("firstname")
            # patient_secondname = get_info.get("secondname")
            # print(patient_lastname + patient_secondname + patient_firstname)
            # await message.answer(f"–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å, {patient_firstname} {patient_secondname}!")
            # await message.answer("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã:")

        else:
            await message.answer("–õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            await lk_question(message)


'''2.0. - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é = –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'''

# callback item –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑–∞, –ø–æ—ç—Ç–æ–º—É –≤—ã–Ω–æ—Å–∏–º)
main_menu_item = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')


@dp.callback_query_handler(text="lk_rest")
async def restart_welcome(call: types.CallbackQuery):
    await call.message.delete()
    await lk_question(call.message)


# –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ
@dp.callback_query_handler(text="lk_menu")
async def auth_welcome(call: types.CallbackQuery):
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, mis_arianda.get_patient_info(db.use_token(call.message.chat.id)))

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        welcome_menu = types.InlineKeyboardMarkup(row_width=1)
        # item1 = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
        item2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ", callback_data='clinic_info')
        item3 = types.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data='my_info')
        item4 = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úç", callback_data='feedback')
        item5 = types.InlineKeyboardButton("–í—ã–π—Ç–∏ üö™", callback_data='lk_rest')
        welcome_menu.add(main_menu_item, item2, item3, item4, item5)

        # TODO –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ "Message can't be deleted for everyone" –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è
        #  —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–µ –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ
        if msg_ids_from_auth:  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤–≤–æ–¥–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
            for msg_id in msg_ids_from_auth:
                # print(msg_id)
                await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id.message_id)
            msg_ids_from_auth.clear()

        get_info = mis_arianda.get_patient_info(db.use_token(call.message.chat.id))
        patient_lastname = get_info.get("lastname")
        patient_firstname = get_info.get("firstname")
        patient_secondname = get_info.get("secondname")
        print(patient_lastname + patient_secondname + patient_firstname)
        await call.message.edit_text(
            f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b> {patient_firstname} {patient_secondname} {patient_lastname}",
            reply_markup=welcome_menu)


'''2.0.0. - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é -> –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é '''


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text="main_menu")
async def main_menu(call: types.CallbackQuery):
    await call.answer()
    main_markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ó–ê–ü–ò–°–ê–¢–¨–°–Ø", callback_data='record')
    item2 = types.InlineKeyboardButton("–ú–û–ò –ó–ê–ü–ò–°–ò", callback_data='my_recordings')
    item3 = types.InlineKeyboardButton("–®–¢–†–ò–•-–ö–û–î", callback_data='entry_code')
    item4 = types.InlineKeyboardButton("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø", callback_data='doctor_res')
    item5 = types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='lk_menu')
    main_markup.add(item1, item2, item3, item4, item5)

    if msg_ids_from_my_recordings:  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–≤–∏—Å–µ –ú–û–ò –ó–ê–ü–ò–°–ò –ø–æ id, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è
        for msg_id in msg_ids_from_my_recordings:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id.message_id)
        msg_ids_from_my_recordings.clear()

    await call.message.edit_text("üìÑ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", reply_markup=main_markup)

    # await call.message.edit_reply_markup(main_markup)   # –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


'''2.0.1. - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é -> –æ –∫–ª–∏–Ω–∏–∫–µ '''


#  —Ä–∞–∑–¥–µ–ª –û –ö–õ–ò–ù–ò–ö–ï
@dp.callback_query_handler(text="clinic_info")
async def about_clinic(call: types.CallbackQuery):
    back_btn = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©", callback_data='lk_menu')
    back_btn.add(item1)
    with open("about_clinic.txt", 'r', encoding='utf8') as about_f:
        await call.message.edit_text(about_f.read(), reply_markup=back_btn)


'''2.0.2. - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é -> –º–æ–∏ –¥–∞–Ω–Ω—ã–µ '''


#  —Ä–∞–∑–¥–µ–ª –ú–û–ò –î–ê–ù–ù–´–ï
@dp.callback_query_handler(text="my_info")
async def patient_info(call: types.CallbackQuery):
    get_info = mis_arianda.get_patient_info(db.use_token(call.message.chat.id))
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, get_info)
    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return

    else:
        back_btn = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©", callback_data='lk_menu')
        back_btn.add(item1)

        await call.message.edit_text(f"<b>–§–ò–û:</b> {get_info.get('lastname')} {get_info.get('firstname')} "
                                     f"{get_info.get('secondname')}\n"
                                     f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {get_info.get('birthdatestr')}\n"
                                     f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {get_info.get('phone')}\n"
                                     f"<b>–ú–æ–±. —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {get_info.get('cellular')}\n"
                                     f"<b>E-mail:</b> {get_info.get('email')}\n"
                                     f"<b>–°–ù–ò–õ–°:</b> {get_info.get('snils')}\n"
                                     f"<b>–ê–¥—Ä–µ—Å:</b> {get_info.get('address_proj')}",
                                     reply_markup=back_btn)


'''2.0.3. - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é -> –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ '''


#  —Ä–∞–∑–¥–µ–ª –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (States) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Feedback(StatesGroup):
    feedback = State()  # –ó–∞–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    end = State()


@dp.callback_query_handler(text="feedback")
async def get_feedback(call: types.CallbackQuery):
    await Feedback.feedback.set()  # –∑–∞–¥–∞–µ–º state (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞!\n\n–ß—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª—É—á—à–µ, "
                                 "–Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


@dp.message_handler(state=Feedback.feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['feedback_text'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–∑—ã–≤
        await state.finish()

        get_info = mis_arianda.get_patient_info(db.use_token(message.chat.id))

        requests.get('https://api.telegram.org/bot{}/sendMessage'.format(config.TOKEN), params=dict(
            chat_id='@med122_feedback',
            text=f"{get_info.get('lastname')} {get_info.get('firstname')} "
                 f"{get_info.get('secondname')} (@{message.from_user.username}, {get_info.get('cellular')}) "
                 f"–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: {data['feedback_text']}"
        ))

        back_btn = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©", callback_data='lk_menu')
        back_btn.add(item1)

        await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –í–∞—à–µ –º–Ω–µ–Ω–∏–µ.", reply_markup=back_btn)


''' 2.1. - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> —Å–µ—Ä–≤–∏—Å –ú–û–ò –ó–ê–ü–ò–°–ò '''

msg_ids_from_my_recordings = []


# —Å–µ—Ä–≤–∏—Å –ú–û–ò –ó–ê–ü–ò–°–ò - —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
@dp.callback_query_handler(text="my_recordings")
async def recordings(call: types.CallbackQuery):
    await call.answer()
    # await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    all_recordings = mis_arianda.get_recordings(db.use_token(call.message.chat.id))
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_recordings)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        cancel_rec_btn = types.InlineKeyboardMarkup(row_width=1)
        cancel_rec_menu_btn = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel_recording')
        # item2 = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
        cancel_rec_btn.add(item1)
        cancel_rec_menu_btn.add(item1, main_menu_item)

        i = 0
        my_rec = []

        if all_recordings:
            for recording in all_recordings:
                i += 1
                recording_data = (f"<b>–ó–∞–ø–∏—Å—å ‚Ññ{i}:</b>\n"
                                  f"üìÖ {recording.get('dat_bgn')}\n"
                                  f"ü©∫Ô∏è {recording.get('spec')}\n"
                                  f"üë®‚Äç‚öï {recording.get('lastname')} "
                                  f"{recording.get('firstname')} {recording.get('secondname')}\n"
                                  f"üè• {recording.get('depname')}\n"
                                  f"üìç {recording.get('addr')}\n"
                                  f"–ö–∞–±–∏–Ω–µ—Ç: {recording.get('cab')}\n"
                                  f"‚òé {recording.get('phone')}")
                my_rec.append(recording_data)
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á–∞–º
                # if recording == all_recordings[-1]:  # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –µ—â–µ –∫–Ω–æ–ø–∫—É –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
            await call.message.edit_text("<b><u>–ú–û–ò –ó–ê–ü–ò–°–ò</u></b>\n\n" + '\n\n'.join(my_rec),
                                         reply_markup=cancel_rec_menu_btn)
            # else:
            #     message_id = await call.message.answer(recording_data, reply_markup=cancel_rec_btn)
            #     msg_ids_from_my_recordings.append(message_id)

        else:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
            to_main_menu = types.InlineKeyboardMarkup(row_width=1)
            to_main_menu.add(main_menu_item)
            await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π", reply_markup=to_main_menu)


# recs_rnumb_ids = []
# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ (–¥–∞–ª—å—à–µ —Ç–æ–∂–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è)
rnumb_cb = CallbackData("cancel", "rnumb_id")


# —Å–µ—Ä–≤–∏—Å –ú–û–ò –ó–ê–ü–ò–°–ò - –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@dp.callback_query_handler(text="cancel_recording")
async def canc_rec(call: types.CallbackQuery):
    all_recordings = mis_arianda.get_recordings(db.use_token(call.message.chat.id))
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_recordings)
    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return

    else:
        i = 0
        recs = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data='my_recordings')

        for recording in all_recordings:
            i += 1
            rnumb = recording.get('rnumb_id')
            # canc_rnumb = f"cancel{rnumb}"
            # print(rnumb)
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–∏–∫–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ä–∞–≤–Ω–æ–π id –∑–∞–ø–∏—Å–∏
            # item = types.InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Ññ{i}", callback_data=canc_rnumb)
            item = types.InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Ññ{i}", callback_data=rnumb_cb.new(rnumb_id=rnumb))
            # recs_rnumb_ids.append(rnumb)
            recs.add(item)

        recs.add(item1)
        await call.message.edit_reply_markup(reply_markup=recs)


#  –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–ø–∏—Å–∏, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É id –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ rnumb_cb
# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('cancel'))
@dp.callback_query_handler(rnumb_cb.filter())
async def canc_rec2(call: types.CallbackQuery, callback_data: dict):
    to_menu_btn = types.InlineKeyboardMarkup(row_width=1)
    # item = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
    to_menu_btn.add(main_menu_item)
    # print(call.data.strip('cancel'))
    # mis_arianda.cancel_rec(db.use_token(call.message.chat.id), call.data.strip('cancel'))
    mis_arianda.cancel_rec(db.use_token(call.message.chat.id), callback_data['rnumb_id'])
    await call.message.edit_text(f"–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå", reply_markup=to_menu_btn)


''' 2.2. - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> —Å–µ—Ä–≤–∏—Å –ó–ê–ü–ò–°–ê–¢–¨–°–Ø '''

# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ id —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
rnumb_spec_cb = CallbackData("spec", "spec_id")


# 1. —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
@dp.callback_query_handler(text="record")
async def show_spec_list(call: types.CallbackQuery):
    # await call.message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    all_spec = mis_arianda.get_spec_list(db.use_token(call.message.chat.id))
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_spec)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        spec_list_menu = types.InlineKeyboardMarkup(row_width=1)
        back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data='main_menu')

        for spec in all_spec:
            spec_id = spec.get('spec_id')
            # print(spec_id)
            spec_text = spec.get('spec_text')
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–∏–∫–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ä–∞–≤–Ω–æ–π id —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            spec_item = types.InlineKeyboardButton(spec_text, callback_data=rnumb_spec_cb.new(spec_id=spec_id))
            spec_list_menu.add(spec_item)

        spec_list_menu.add(back_btn)
        await call.message.edit_text("ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞", reply_markup=spec_list_menu)


# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ id –¥–æ–∫—Ç–æ—Ä–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
rnumb_doc_cb = CallbackData("spec", "spec_id", "doc_id")


# 2. —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
@dp.callback_query_handler(rnumb_spec_cb.filter())
async def show_doc_list(call: types.CallbackQuery, callback_data: dict):
    await call.answer(text="–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚è≥\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
    all_doc = mis_arianda.get_doc_list(db.use_token(call.message.chat.id), callback_data['spec_id'])
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_doc)
    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return

    else:
        doc_list_menu = types.InlineKeyboardMarkup(row_width=1)
        back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data='record')
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∂–∞—Ç–æ–µ-–ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ spec_id –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–∞—á–µ–π
        all_doc = mis_arianda.get_doc_list(db.use_token(call.message.chat.id), callback_data['spec_id'])

        for doc in all_doc:
            doc_id = doc.get('doc_id')
            # print(spec_id)
            doc_name = f"{doc.get('doc_l_name')} {doc.get('doc_f_name')} {doc.get('doc_s_name')}"
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–∏–∫–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ä–∞–≤–Ω–æ–π id —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ id –≤—Ä–∞—á–∞
            doc_item = types.InlineKeyboardButton(doc_name, callback_data=rnumb_doc_cb.new(
                spec_id=callback_data['spec_id'],
                doc_id=doc_id))
            doc_list_menu.add(doc_item)

        doc_list_menu.add(back_btn)
        await call.message.edit_text("üë®‚Äç‚öïÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞", reply_markup=doc_list_menu)

# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ id —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –¥–æ–∫—Ç–æ—Ä–∞ –∏ –¥–∞—Ç—ã –ø—Ä–∏–µ–º–∞
rnumb_date_cb = CallbackData("spec", "spec_id", "doc_id", "date")


# 3. —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–∫–æ–≤ - –≤—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.callback_query_handler(rnumb_doc_cb.filter())
async def show_date_list(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    all_date = mis_arianda.get_rnumb_list(db.use_token(call.message.chat.id),
                                          callback_data['spec_id'], callback_data['doc_id'])
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_date)
    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return

    else:
        date_list_menu = types.InlineKeyboardMarkup(row_width=3)
        back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥",
                                              callback_data=f"spec:{callback_data['spec_id']}")
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∂–∞—Ç–æ–µ-–ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ spec_id –∏ doc_id –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞—Ç—ã
        dates = []

        for date in all_date:
            f_date = date.get('rnumb_dat_begin').split(" ")[0]  # –¥–∞—Ç–∞
            # print(f_date)
            ff_date = datetime.datetime.strptime(f_date, '%d.%m.%Y')
            today = datetime.datetime.today()
            # print(ff_date)
            # print("today: " + str(today))
            # print (today + datetime.timedelta(days=14))

            if ff_date < (today + datetime.timedelta(days=14)) and f_date not in dates:
                # datetime.isoweekday(now)
                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–∏–∫–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ä–∞–≤–Ω–æ–π id —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, id –≤—Ä–∞—á–∞ –∏ –¥–∞—Ç—É
                date_item = types.InlineKeyboardButton(f_date, callback_data=rnumb_date_cb.new(
                    spec_id=callback_data['spec_id'],
                    doc_id=callback_data['doc_id'],
                    date=f_date))
                date_list_menu.add(date_item)
                dates.append(f_date)

        date_list_menu.add(back_btn)
        await call.message.edit_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞", reply_markup=date_list_menu)


rnumb_rec_id_cb = CallbackData('rec', 'rec_rnumb_id')


# 4. —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–∫–æ–≤ - –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(rnumb_date_cb.filter())
async def show_time_list(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    all_date = mis_arianda.get_rnumb_list(db.use_token(call.message.chat.id),
                                          callback_data['spec_id'], callback_data['doc_id'])
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_date)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        time_list_menu = types.InlineKeyboardMarkup(row_width=3)
        back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥",
                                              callback_data=f"spec:{callback_data['spec_id']}:{callback_data['doc_id']}")
        times = []

        for date in all_date:
            f_date = date.get('rnumb_dat_begin').split(" ")[0]  # –¥–∞—Ç–∞
            f_time = date.get('rnumb_dat_begin').split(" ")[1]  # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            f_time_end = date.get('rnumb_dat_end').split(" ")[1]  # –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è

            if f_date == callback_data['date'] and f_time not in times:
                time_item = types.InlineKeyboardButton(f"{f_time}-{f_time_end}", callback_data=rnumb_rec_id_cb.new(
                    rec_rnumb_id=date.get('rnumb_id')))
                time_list_menu.add(time_item)
                times.append(f_time)

        time_list_menu.add(back_btn)
        await call.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞", reply_markup=time_list_menu)

# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ id —Ç–∞–ª–æ–Ω–∞
rnumb_create_rec_cb = CallbackData('create_rec', 'rnumb_id')


# 5. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∏–Ω—Ñ–æ –æ —Ç–∞–ª–æ–Ω–µ
@dp.callback_query_handler(rnumb_rec_id_cb.filter())
async def rec_confirmation(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    all_date = mis_arianda.get_rnumb_info(db.use_token(call.message.chat.id), callback_data['rec_rnumb_id'])
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_date)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        confirm_rec = types.InlineKeyboardMarkup(row_width=3)
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                                                 callback_data=rnumb_create_rec_cb.new(
                                                     rnumb_id=callback_data['rec_rnumb_id']))
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='main_menu')
        confirm_rec.add(confirm_btn, cancel_btn)

        for date in all_date:
            rec_info = (f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:</b>\n"
                        f"üìÖ {date.get('rnumb_dat_begin')}-{date.get('rnumb_dat_end').split(' ')[1]}\n"
                        f"ü©∫Ô∏è {date.get('rnumb_spec')}\n"
                        f"üë®‚Äç‚öï {date.get('rnumb_doc_lname')} "
                        f"{date.get('rnumb_doc_fname')} {date.get('rnumb_doc_sname')}\n"
                        f"üè• {date.get('rnumb_depname')}\n"
                        f"üìç {date.get('rnumb_addr')}\n"
                        f"–ö–∞–±–∏–Ω–µ—Ç: {date.get('rnumb_cab')}\n"
                        f"‚òé {date.get('rnumb_phone')}")

            await call.message.edit_text(rec_info, reply_markup=confirm_rec)


# 6. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø–∏—Å—å –Ω–∞ —Ç–∞–ª–æ–Ω + –æ–ø–ª–∞—Ç–∞
@dp.callback_query_handler(rnumb_create_rec_cb.filter())
async def create_recording(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    all_date = mis_arianda.create_rec(db.use_token(call.message.chat.id), callback_data['rnumb_id']).json()
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_date)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        # TODO –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–ª–∞—Ç—É
        payment_menu = types.InlineKeyboardMarkup(row_width=3)
        pay_btn = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="to_pay")
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='main_menu')
        payment_menu.add(pay_btn, cancel_btn)
        await call.message.edit_text("–£ –í–∞—Å –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã, –∏–Ω–∞—á–µ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                     reply_markup=payment_menu)


@dp.callback_query_handler(text="to_pay")
async def payment_confirmation(call: types.CallbackQuery):
    to_main_menu = types.InlineKeyboardMarkup(row_width=1)
    to_main_menu.add(main_menu_item)

    await call.message.edit_text('‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.</b>\n\n'
                                 '–°–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ->–ú–û–ò –ó–ê–ü–ò–°–ò.\n\n'
                                 '–ó–∞ —Å—É—Ç–∫–∏ –¥–æ –ø—Ä–∏—ë–º–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞. '
                                 '–û–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ->–®–¢–†–ò–•-–ö–û–î –ù–ê –í–•–û–î.',
                                 reply_markup=to_main_menu)


''' 2.3. - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> —Å–µ—Ä–≤–∏—Å –ó–∞–∫–ª—é—á–µ–Ω–∏—è '''

# –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
visit_history_cb = CallbackData('visit', 'visit_id', 'visit_tp', 'visit_date')

# 1. —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π
@dp.callback_query_handler(text="doctor_res")
async def show_history(call: types.CallbackQuery):
    await call.answer(text="–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚è≥\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
    all_visits = mis_arianda.get_history_list(db.use_token(call.message.chat.id))
    #  –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    rep_auth = await repeat_auth(call.message, all_visits)

    if rep_auth == "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        return
    else:
        visit_list_menu = types.InlineKeyboardMarkup(row_width=1)
        back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data='main_menu')

        for visit in all_visits[:10]:
            visit_id = visit.get('keyid')
            visit_date = visit.get('dat').split(" ")[0]
            visit_spec = visit.get('spec')
            visit_tp = visit.get('typehistory')
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–∏–∫–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ä–∞–≤–Ω–æ–π key_id = id –ø–æ—Å–µ—â–µ–Ω–∏—è
            visit_item = types.InlineKeyboardButton(f'üìã {visit_date}, {visit_spec}',
                                                   callback_data=visit_history_cb.new(visit_id=visit_id, visit_tp=visit_tp,
                                                                                      visit_date=visit_date))
            visit_list_menu.add(visit_item)

        visit_list_menu.add(back_btn)

        await call.message.edit_text("<b><u>–ú–û–ò –ü–û–°–ï–©–ï–ù–ò–Ø</u></b>\n\n"
                                     "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π.\n"
                                     "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ üìã\n\n"
                                     "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë</b>.",
                                     reply_markup=visit_list_menu)


@dp.callback_query_handler(visit_history_cb.filter())
async def send_visit_pdf(call: types.CallbackQuery, callback_data: dict):
    visit_pdf = mis_arianda.get_visit_pdf(callback_data['visit_id'], callback_data['visit_tp'])
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # http://80.73.198.109:7701/history/events/item/:tp/:id.pdf?tp=2149655268&id=visit
    pdf_url = visit_pdf.url
    # –ø–æ–≤—Å–ø–æ–º–∏–Ω–∞–ª –∫–∞–∫ —Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ üòÇüòÇ –∞ –ø–æ—Ç–æ–º –≤—Å–ø–æ–º–Ω–∏–ª –ø—Ä–æ callback_data...
    # pdf_url_splitted = pdf_url.split("?")
    # tp_id_splitted = pdf_url_splitted[1].split("&")
    # visit_tp = tp_id_splitted[0].lstrip("tp=")
    # visit_id = tp_id_splitted[1].lstrip("id=")
    visit_tp = callback_data['visit_tp']
    visit_id = callback_data['visit_id']
    visit_date = callback_data['visit_date']
    pdf_url_repl_tp = pdf_url.replace(":tp", visit_tp)
    pdf_url_repl_id = pdf_url_repl_tp.replace(":id", visit_id)
    pdf_url_replaced = pdf_url_repl_id.split("?")[0]
    print(pdf_url_replaced)
    to_menu_btn = types.InlineKeyboardMarkup(row_width=1)
    back_btn = types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data='doctor_res')
    to_menu_btn.add(back_btn, main_menu_item)
    await call.message.delete()
    await bot.send_document(call.message.chat.id, types.InputFile.from_url(pdf_url_replaced),
                            caption=f"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –æ—Ç {visit_date}")
    await call.message.answer('üëÜ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ PDF-—Ñ–∞–π–ª–µ üìã', reply_markup=to_menu_btn)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
