# import xml.etree.ElementTree as ET
import json

import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import aiogram.utils.markdown as md
from aiogram.types import ParseMode

import config
import logging
from aiogram import Bot, Dispatcher, executor, types
import mis_arianda
import db_postgre as db

API_TOKEN = config.TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # TODO —Å—é–¥–∞ –ë–î
dp = Dispatcher(bot, storage=storage)


# START - –ù–ê–ß–ê–õ–û –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° –ë–û–¢–û–ú
@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!"
                         "".format(message.from_user, bot.get_me()),
                         parse_mode='html')

    with open("start_info_message.txt", 'r', encoding='utf8') as intro_f:
        await message.answer(intro_f.read())

    await lk_question(message)


# ToDo - –∫–Ω–æ–ø–∫–∞ –ù–ê–ó–ê–î
# def one_step_back():
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#     keyboard.add("–ù–ê–ó–ê–î")
#     return keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text="main_menu")
async def main_menu(call: types.CallbackQuery):
    main_markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ó–ê–ü–ò–°–ê–¢–¨–°–Ø", callback_data='record')
    item2 = types.InlineKeyboardButton("–ú–û–ò –ó–ê–ü–ò–°–ò", callback_data='my_recordings')
    item3 = types.InlineKeyboardButton("–®–¢–†–ò–•-–ö–û–î", callback_data='entry_code')
    item4 = types.InlineKeyboardButton("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø", callback_data='doctor_res')
    main_markup.add(item1, item2, item3, item4)

    await call.message.answer("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", reply_markup=main_markup)


async def lk_question(message: types.Message):
    lk_markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–î–ê", callback_data='lk_exists')
    item2 = types.InlineKeyboardButton("–ù–ï–¢", callback_data='lk_not_exists')
    lk_markup.add(item1, item2)

    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?", reply_markup=lk_markup)

    # one_step_back()


''' –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –û–¢–†–ê–ë–û–¢–ö–ê –õ–û–ì–ò–ö–ò –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö '''
''' 1 - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –õ–ö: 1 —à–∞–≥ - —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ 2 –∫–Ω–æ–ø–∫–∏ '''


@dp.callback_query_handler(text="lk_not_exists")
async def registration_offer(call: types.CallbackQuery):
    registration_question = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='to_registration')
    item2 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data='continue_without_reg')
    registration_question.add(item1, item2)

    await call.message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å, "
                              "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø–∏—Å–∏ –∏ –æ–ø–ª–∞—Ç—ã. "
                              "–ê –µ—â—ë –Ω–∞—à –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏ –¥–æ "
                              "–ø—Ä–∏–µ–º–∞ –∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é "
                              "—Ü–µ–Ω—Ç—Ä–∞.", reply_markup=registration_question)
    # one_step_back()

    # bot.delete_message(msg.chat_id, msg.message_id)
    # bot.register_next_step_handler(msg, getg )


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø - –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –ù–ê –§–û–†–ú–£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò'''


@dp.callback_query_handler(text="to_registration")
async def registration_link(call: types.CallbackQuery):
    await call.message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –Ω–∞ —Å–∞–π—Ç –°–ó–û–ù–ö–¶ –°–æ–∫–æ–ª–æ–≤–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ"
                              " —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                              "üåê https://med122.com/telemedicine/register/\n\n"
                              "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è"
                              " –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                              "–û–Ω–∏ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—à–ª—é—Ç –Ω–∞ –ø–æ—á—Ç—É –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.\n\n"
                              "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.")
    await lk_question(call.message)


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø - –û–¢–ü–†–ê–í–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¶–ï–ù–¢–†–ï'''


@dp.callback_query_handler(text="continue_without_reg")
async def registration_link(call: types.CallbackQuery):
    record_btn = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data='record_to_doc')
    record_btn.add(item1)
    with open("about_clinic.txt", 'r', encoding='utf8') as about_f:
        await call.message.answer(about_f.read(), reply_markup=record_btn)


'''–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –ö –í–†–ê–ß–£ (–ù–ï–ó–ê–†–ï–ì. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨) - –¢–ï–ö–°–¢ –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ó–ê–†–ï–ì–ê–¢–¨–°–Ø'''


@dp.callback_query_handler(text="record_to_doc")
async def registration_link(call: types.CallbackQuery):
    await call.message.answer("–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ "
                              "—Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    await registration_offer(call)


# ToDo –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Å–º. Bot userflow

''' 2 - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –õ–ö: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è)'''


# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (States) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
class RegForm(StatesGroup):
    login = State()  # –ó–∞–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    passwd = State()


@dp.callback_query_handler(text="lk_exists")
async def authorisation_start(call: types.CallbackQuery):
    await RegForm.login.set()  # –∑–∞–¥–∞–µ–º state (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: \n(—Ç–æ—Ç –∂–µ, —á—Ç–æ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è "
                              "–¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ lk.med122.com)")


@dp.message_handler(state=RegForm.login)
async def process_name(message: types.Message, state: FSMContext):
    #  –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç state —Ç–∏–ø–∞ FSMContext. –ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç FSM-–±—ç–∫–µ–Ω–¥–∞.
    async with state.proxy() as data:
        data['login'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–æ–≥–∏–Ω
        await RegForm.next()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - —É –Ω–∞—Å —ç—Ç–æ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.update_data(passwd=message.text)  # –æ–±–Ω–æ–≤–ª—è–µ–º data –∏ state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è


@dp.message_handler(state=RegForm.passwd)
async def process_passwd(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['passwd'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        await state.finish()

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ç —Å—Ç–æ–∏—Ç —á—Ç–æ-—Ç–æ –≤—ã–Ω–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ú–ò–° –ê—Ä–∏–∞–¥–Ω–∞ -- –≤—ã–Ω–µ—Å–µ–Ω–æ

        login_response = mis_arianda.auth(data['login'], data['passwd'])

        if login_response.json().get("success"):
            # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
            token = login_response.json().get("data").get("token")  # ToDo –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–∫–µ–Ω –≤ –ë–î –≤–º–µ—Å—Ç–µ —Å  chat_id
            db.save_token(message.chat.id, token)

            print("Authorization: SUCCESS!")
            print(db.use_token(message.chat.id))
            await auth_welcome(message)
            # get_info = mis_arianda.get_patient_info(db.use_token(message.chat.id))
            # patient_lastname = get_info.get("lastname")
            # patient_firstname = get_info.get("firstname")
            # patient_secondname = get_info.get("secondname")
            # print(patient_lastname + patient_secondname + patient_firstname)
            # await message.answer(f"–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å, {patient_firstname} {patient_secondname}!")
            # await message.answer("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã:")

        else:
            await message.answer("–õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            await lk_question(message)


async def auth_welcome(message: types.Message):
    welcome_menu = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
    item2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ", callback_data='clinic_info')
    item3 = types.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data='my_info')
    welcome_menu.add(item1, item2, item3)

    get_info = mis_arianda.get_patient_info(db.use_token(message.chat.id))
    patient_lastname = get_info.get("lastname")
    patient_firstname = get_info.get("firstname")
    patient_secondname = get_info.get("secondname")
    print(patient_lastname + patient_secondname + patient_firstname)
    await message.answer(f"–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å, {patient_firstname} {patient_secondname}!", reply_markup=welcome_menu)




''' 2.1 - —Å–µ—Ä–≤–∏—Å –ú–û–ò –ó–ê–ü–ò–°–ò '''


@dp.callback_query_handler(text="my_recordings")
async def registration_offer(call: types.CallbackQuery):
    cancel_rec_btn = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel_recording')
    item2 = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
    cancel_rec_btn.add(item1, item2)

    all_recordings = mis_arianda.get_recordings(db.use_token(call.message.chat.id))
    i = 0
    if all_recordings:
        for recording in all_recordings:
            i += 1
            await call.message.answer(f"–ó–∞–ø–∏—Å—å {i}:\n"
                                      f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {recording.get('dat_bgn')}\n"
                                      f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {recording.get('spec')}\n"
                                      f"–§–ò–û –≤—Ä–∞—á–∞: {recording.get('lastname')} "
                                      f"{recording.get('firstname')} {recording.get('secondname')}\n"
                                      f"–ú–µ—Å—Ç–æ: {recording.get('depname')}\n"
                                      f"–ê–¥—Ä–µ—Å: {recording.get('addr')}\n"
                                      f"–ö–∞–±–∏–Ω–µ—Ç: {recording.get('cab')}\n"
                                      f"–¢–µ–ª–µ—Ñ–æ–Ω:  {recording.get('phone')}",
                                      reply_markup=cancel_rec_btn)
    else:
        to_main_menu = types.InlineKeyboardMarkup(row_width=1)
        item2 = types.InlineKeyboardButton("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')
        to_main_menu.add(item2)
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π", reply_markup=to_main_menu)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
